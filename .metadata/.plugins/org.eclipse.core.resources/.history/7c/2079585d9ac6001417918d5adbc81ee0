/*
 * iBlind.h
 *
 *  Created on: Jan 25, 2015
 *      Author: micha
 */

#ifndef IBLINDSWITCHIN_H
#define IBLINDSWITCHIN_H

#include <string>
#include <list>

#include "Base.h"

typedef enum BlindState
{
   BlindUp,
   BlindMovingDown,
   BlindDown,
   BlindMovingUp,
   BlindSomeWhere
}BlindState;

class iRoom;

class iBlind : public Base{
public:
      // Constructors
      iBlind(unsigned int Id, std::string Name, iRoom* pRoom):Base(Id, Name, pRoom){};
      iBlind(const iBlind& light);  // copy constructor
      virtual ~iBlind();

      // Operators
      //virtual iBlind& operator=(const iBlind& other) = 0;

      // access functions
      virtual BlindState  getState() const = 0;
      virtual BlindState  moveUp() = 0;
      virtual BlindState  moveDown() = 0;

      // construction functions
protected:
      iBlind(): Base(0, "", nullptr){
         std::cout << "Wrong default constructor iLight";
      }
};

#endif /* IBLINDSWITCHIN_H */
