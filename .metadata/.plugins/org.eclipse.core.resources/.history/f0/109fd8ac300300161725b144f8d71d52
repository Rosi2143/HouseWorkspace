//============================================================================
// Name        : FunctionTracer.cpp
// Author      : Michael Rossner
// Version     :
// Copyright   : LGPL2
// Description : Hello World in C++, Ansi-style
//============================================================================

#include "FunctionTracer.h"

guarded_map<int, int> FunctionTraceCounter;
int FunctionTrace_TraceLevel = 0;

void SetTraceLevel(int level){
   FunctionTrace_TraceLevel = level;
}
void FunctionTracer::Constructor(){
   _sIndent = std::string((size_t)(_Counter*2), '-');
   std::cout << _sIndent << "FunctionTracer Entry:" << _sFunctionName << " - ThreadId = " << _ThreadId << " - CallDepth = " << _Counter << std::endl;
   if(-1 == clock_gettime(CLOCK_MONOTONIC_COARSE, &_Entry_Clock_Time)) {
      perror( "clock gettime CLOCK_MONOTONIC_COARSE" );
   }
   if (-1 == clock_gettime(CLOCK_THREAD_CPUTIME_ID, &_Entry_Cpu_Time)) {
      perror( "clock gettime CLOCK_THREAD_CPUTIME_ID" );
   }
   _EntryTraceDone = true;

}
void FunctionTracer::Destructor(){
   int Counter = FunctionTraceCounter.get(_ThreadId);
   if (Counter <= FunctionTrace_TraceLevel){
      timespec Cpu_Time, Clock_Time;
      if (-1 == clock_gettime(CLOCK_MONOTONIC_COARSE, &Clock_Time)){
         perror("clock_gettime CLOCK_MONOTONIC_COARSE");
      }
      if (-1 == clock_gettime(CLOCK_THREAD_CPUTIME_ID, &Cpu_Time)){
         perror("clock_gettime CLOCK_THREAD_CPUTIME_ID");
      }
      int Clock_Duration = Clock_Time.tv_nsec - _Entry_Clock_Time.tv_nsec;
      int CPU_Duration = Cpu_Time.tv_nsec - _Entry_Cpu_Time.tv_nsec;
      int Counter = FunctionTraceCounter.get(_ThreadId);
      std::cout << _sIndent << "FunctionTracer Exit :" << _sFunctionName << " - ThreadId = " << _ThreadId << " - CallDepth = " << Counter << std::endl;
      std::cout << _sIndent << "Function used CPU for " << (CPU_Duration / 1000 / 1000) << "ms" << std::endl;
      std::cout << _sIndent << "Function Duration     " << (Clock_Duration / 1000 / 1000) << "ms" << std::endl;
      _ExitTraceDone = true;
   }
   Counter--;
   FunctionTraceCounter.set(ThreadId, Counter);
}
