/*
 * Base.h
 *
 *  Created on: Feb 12, 2015
 *      Author: micha
 */

#ifndef SRC_BASE_H_
#define SRC_BASE_H_

#include <iostream>

class Room;

class Base {
   public:
      // Constructors
      Base(unsigned int _Id, std::string _Name, const Room* pRoom) :
            _Name(_Name), _Id(_Id), _BaseState(false), _pRoom(pRoom) {
      }
      Base(const Base &base) :  // copy constructor
            _Name(base.getName()), _Id(base.getId(),
                  _BaseState(base.getState(), _pRoom(base.getRoom()))) {
      }  // copy constructor
      virtual ~Base() {
      }

      // Operators
      Base& operator=(const Base& other) {
         _Name = other.getName();
         _Id = other.getId();
         _BaseState = other.getState();
         _pRoom = other.getRoom();
         return *this;
      }

      // access functions
      virtual const std::string getName() const {
         return _Name;
      }
      virtual const unsigned int getId() const {
         return _Id;
      }
      virtual bool getState() const {
         return _State;
      }
      virtual const Room* getRoom() const {
         return _pRoom;
      }

   protected:
      Base() :
            _Name(""), _Id(0), _BaseState(false), _pRoom(nullptr) {
         std::cout << "Wrong default constructor Base";
      }
      const std::string _Name;
      const unsigned int _Id;
      bool _BaseState;
      connstRoom* _pRoom;
};

#endif /* SRC_BASE_H_ */
