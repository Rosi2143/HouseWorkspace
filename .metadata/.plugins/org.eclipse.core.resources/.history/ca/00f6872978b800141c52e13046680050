/*
 * Time.h
 *
 *  Created on: Feb 17, 2015
 *      Author: micha
 */

#ifndef TIME_H_
#define TIME_H_

#include "iTime.h"

typedef struct PressTime {
   int ShortPressTimeMs;
   int LongPressTimeMs;
   int VeryLongPressTimeMs;
   int JammedPressTimeMs;
} PressTime;

class Time: public iTime {
   public:
      Time(PressTime pressTime):_PressTime(pressTime) {
      }
      ;
      virtual ~Time() {
      }
      virtual ptime getCurrentTime() const {
         return microsec_clock::local_time();
      }
      virtual PressType evalPressType(boost::posix_time::time_duration duration) const {
         if(duration < boost::posix_time::millisecond(_PressTime.ShortPressTimeMs)){
            return ShortPressed;
         } else if(duration < boost::posix_time::millisecond(_PressTime.LongPressTimeMs)){
            return LongPressed;
         } else if(duration < boost::posix_time::millisecond(_PressTime.VeryLongPressTimeMs)){
            return VeryLongPressed;
         } else if(duration < boost::posix_time::millisecond(_PressTime.JammedPressTimeMs)){
            return Jammed;
         } else {

         }
      }
   protected:
      PressTime _PressTime;
};

#endif /* TIME_H_ */
