/*
 * main.cpp
 *
 *  Created on: Apr 10, 2016
 *      Author: micha
 */

#include <gtest/gtest.h>
#include <gmock/gmock.h>

#define UNIT_TEST

#include "FunctionTracer.h"
using namespace std;
using ::testing::_;
using ::testing::Return;
using ::testing::Invoke;
using ::testing::TestWithParam;
using ::testing::Values;
using ::testing::StrCaseEq;

TEST(House, TraceLevel0_inactive) {
   FUNCTION_TRACE
   ASSERT_EQ(NULL, p.get());
}

TEST(House, TraceLevel1_active) {
   SetTraceLevel(1);
   FUNCTION_TRACE
   ASSERT_TRUE(NULL != p.get());
}

TEST(House, TraceLevel1_Up_Counter1) {
   SetTraceLevel(1);
   FUNCTION_TRACE
   ASSERT_EQ(1, FunctionTraceCounter.get(ThreadId));
}

TEST(House, TraceLevel1_secondIsInactive) {
   SetTraceLevel(1);
   FUNCTION_TRACE
   FUNCTION_TRACE_TEST(2)
   ASSERT_TRUE(NULL != p.get());
   ASSERT_TRUE(NULL == p2.get());
}

TEST(House, TraceLevel1_UpUp_Counter1) {
   SetTraceLevel(1);
   FUNCTION_TRACE
   FUNCTION_TRACE_TEST(2)
   ASSERT_EQ(1, FunctionTraceCounter.get(ThreadId));
}

TEST(House, TraceLevel2_UpUp_Counter2) {
   SetTraceLevel(2);
   FUNCTION_TRACE
   FUNCTION_TRACE_TEST(2)
   ASSERT_EQ(2, FunctionTraceCounter.get(ThreadId));
}

TEST(House, TraceLevel1_UpDown_Counter0) {
   SetTraceLevel(1);
   FUNCTION_TRACE
   p->Destructor();
   ASSERT_TRUE(0 == FunctionTraceCounter.get(ThreadId));
}

TEST(House, TraceLevel1_CpuConsumption_CpuTime) {
   SetTraceLevel(1);
   FUNCTION_TRACE
   usleep(5000);
   p->Destructor();
   ASSERT_TRUE(1 < p->_Cpu_Time_Used_ms);
   ASSERT_TRUE(5 >= p->_Clock_Time_Used_ms);
}

