
#include "Max7312.h"
//#include "Ardino.h"
#include "wiringPi.h"
#include "wiringPiI2C.h"

// Comments
//
//...

/**
 * default constructor uses address #MAX7312_ADDRESS
 */
Max7312::Max7312(){
	setChipAddress(MAX7312_ADDRESS);
	setPinBase(MAX7312_MIN_PINBASE)
	init(0x00, 0x00);
}

/**
 *
 * constructor were the specific chip address can be set
 * @param pinBase pinBase can be any number you like above 64
 * @param chipAddress chip address between 0x20 and 0x5E
 */
Max7312::Max7312(unsigned int pinBase, unsigned char chipAddress){
	setChipAddress(chipAddress);
	setPinBase(pinBase)
	init(0x00, 0x00);
}

/**
 * constructor were the specific chip address and the port directions can be set
 * @param pinBase pinBase can be any number you like above 64
 * @param chipAddress chip address between 0x20 and 0x5E
 * @param portDirection1 default values of ports 0-7 (1 - input; 0 - output)
 * @param portDirection2 default values of ports 8-15 (1 - input; 0 - output)
 */
Max7312::Max7312(unsigned int pinBase, unsigned char chipAddress, unsigned char portDirection1, unsigned char portDirection2)
{
	setChipAddress(chipAddress);
	setPinBase(pinBase)
	init(portDirection1, portDirection2);
}

/**
 * constructor were the specific chip address, the port directions and and the timeoutflag can be set
 * @param pinBase pinBase can be any number you like above 64
 * @param chipAddress chip address between 0x20 and 0x5E
 * @param portDirection1 default values of ports 0-7 (1 - input; 0 - output)
 * @param portDirection2 default values of ports 8-15 (1 - input; 0 - output)
 * @param timeoutFlag 1 enable Bus timeout, 0 disable Bus timeout
 */
Max7312::Max7312(unsigned int pinBase, unsigned char chipAddress, unsigned char portDirection1, unsigned char portDirection2, unsigned char timeoutFlag)
{
	setChipAddress(chipAddress);
	setPinBase(pinBase)
	init(portDirection1, portDirection2, timeoutFlag);
}

/**
 * sets the chip address if it is in the correct range, otherwise it is set to MAX7312_MIN_ADDRESS
 * @param chipAddress I2C adress
 */
void Max7312::setChipAddress(unsigned char chipAddress)
{
	if( (MAX7312_MIN_ADDRESS <= chipAddress)
		and (MAX7312_MAX_ADDRESS >= chipAddress)
		)
	{
		_chipAddress=chipAddress;
	}
	else
	{
		_chipAddress=MAX7312_MIN_ADDRESS;
	}
}

/**
 * sets the pinBase if it is in the correct range, otherwise it is set to MAX7312_MIN_PINBASE
 * @param pinBase - any number above 64
 */
void Max7312::setPinBase(unsigned int pinBase)
{
	if(MAX7312_MIN_PINBASE <= pinBase)
	{
		_pinBase=pinBase;
	}
	else
	{
		_pinBase=MAX7312_MIN_PINBASE;
	}
}

/**
 * initialize the Max7311
 * @param pinBase pinBase can be any number you like above 64
 * @param portDirection1 default values of ports 0-7 (1 - input; 0 - output)
 * @param portDirection2 default values of ports 8-15 (1 - input; 0 - output)
 */
void Max7312::init(unsigned int pinBase, unsigned char portDirection1, unsigned char portDirection2)
{
	init(portDirection1, portDirection2, 0x01);
}

/**
 * initialize the Max7311
 * @param pinBase pinBase can be any number you like above 64
 * @param pinBase pinBase can be any number you like above 64
 * @param portDirection1 default values of ports 0-7 (1 - input; 0 - output)
 * @param portDirection2 default values of ports 8-15 (1 - input; 0 - output)
 * @param timeoutFlag 1 enable Bus timeout, 0 disable Bus timeout
*/
void Max7312::init(unsigned int pinBase, unsigned char portDirection1, unsigned char portDirection2, unsigned char timeoutFlag)
{
	initDataBuffers();


	if ((fd = wiringPiI2CSetup (_chipAddress)) < 0)
	  return;

	node = wiringPiNewNode (pinBase, MAX7312_NUM_OF_PORTS) ;

	node->fd           = fd ;
	node->pinMode      = configPort ;
	node->digitalRead  = readPort ;
	node->digitalWrite = writePort ;
	node->data1        = readPort1 () ;
	node->data2        = readPort2 () ;
	configPort1(portDirection1);
	configPort2(portDirection2);
	configTimeout(timeoutFlag);
}


/**
 * set all port data to 0
 */
void Max7312::initDataBuffers(){
	_port1_data=0;
	_port2_data=0;
}


/********** high level commands, for the user! */

/**
 * read a single port - function required for wiringPi interface
 * @param node link to port structure
 * @param pin - port relative to pinBase
 * @return
 */
int Max7312::readPort(struct wiringPiNodeStruct *node, int pin){
	wiringPiI2CWrite(fd, INPUT_PORT_1)
	_port1_data=wiringPiI2CRead();
	return _port1_data;
}

unsigned char Max7312::readPort1(){
	wiringPiI2CWrite(fd, INPUT_PORT_1)
	_port1_data=wiringPiI2CRead();
	return _port1_data;
}

unsigned char Max7312::readPort2(){
	_port2_data=wiringPiI2CWrite(fd, INPUT_PORT_2);
	return _port2_data;
}

/**
 * write a single port - function requrired for wiringPi interface
 * @param node link to port structure
 * @param pin - port relative to pinBase
 * @param value - value to port should be set to 0 - OFF, 1 - ON
 */
void Max7312::writePort(struct wiringPiNodeStruct *node, int pin, int value){

}

void Max7312::writePort1(unsigned char portData){
	wiringPiI2CWriteReg16(fd, OUTPUT_PORT_1, portData);
}
void Max7312::writePort2(unsigned char portData){
	wiringPiI2CWriteReg16(fd, OUTPUT_PORT_2, portData);
}

void Max7312::polarityInversionPort1(unsigned char portInversion){
	wiringPiI2CWriteReg16(fd, OUTPUT_PORT_1, portInversion);
}
void Max7312::polarityInversionPort2(unsigned char portInversion){
	wiringPiI2CWriteReg16(fd, OUTPUT_PORT_2, portInversion);
}

/**
 * set a single port to Output or Input - function requrired for wiringPi interface
 * @param node link to port structure
 * @param pin - port relative to pinBase
 * @param mode - 0 - Output; 1 - Input
 */
void Max7312::configPort(struct wiringPiNodeStruct *node, int pin, int mode){

}

void Max7312::configPort1(unsigned char portDirection){
	writeChar(CONFIGURATION_PORT_1, portDirection);
}

void Max7312::configPort2(unsigned char portDirection){
	writeChar(CONFIGURATION_PORT_2, portDirection);
}

void Max7312::configTimeout(unsigned char timeoutFlag){
	writeChar(TIMEOUT_REGISTER, timeoutFlag);
}

void Max7312::readIntFlag(){}

/*********** mid level commands, for sending data/cmds */



/************ low level writing to i2c **********/

void Max7312::writeChar(unsigned char registerAddress, unsigned char charData){
  // todo implement i2c write from Wire library
}

unsigned char Max7312::readChar(unsigned char registerAddress){
  // todo implement i2c read from Wire library
}
